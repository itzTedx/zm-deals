import { useEffect, useMemo, useState } from "react";

import NumberFlow from "@number-flow/react";
import { useFormContext } from "react-hook-form";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Separator } from "@/components/ui/separator";

import { IconChevronRight } from "@/assets/icons/chevron";

import { useCharacterCount } from "@/hooks/use-character";
import { env } from "@/lib/env/client";
import { slugify } from "@/lib/functions/slugify";
import { cn } from "@/lib/utils";
import { ProductSchema } from "@/modules/product/schema";

export const ProductMeta = () => {
  const form = useFormContext<ProductSchema>();
  const [isSlugManual, setIsSlugManual] = useState(false);

  const metadata = form.watch("meta");
  const currentSlug = form.watch("meta.slug");
  const currentTitle = form.watch("meta.title");

  const titleHook = useCharacterCount({
    maxLength: 70,
    value: metadata?.title,
    onChange: (value) => form.setValue("meta.title", value),
  });

  const descriptionHook = useCharacterCount({
    maxLength: 155,
    value: metadata?.description,
    onChange: (value) => form.setValue("meta.description", value),
  });

  const autoGeneratedSlug = useMemo(() => {
    return slugify(currentTitle ?? "");
  }, [currentTitle]);

  // Update slug when title changes in auto mode
  const handleTitleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    titleHook.handleChange(e);
    // If in auto mode, update the slug
    if (!isSlugManual) {
      const newSlug = slugify(value);
      form.setValue("meta.slug", newSlug);
    }
  };

  const handleSlugToggle = () => {
    if (isSlugManual) {
      // Switching to auto mode - use auto-generated slug
      form.setValue("meta.slug", autoGeneratedSlug);
      setIsSlugManual(false);
    } else {
      // Switching to manual mode - keep current auto-generated slug as starting point
      form.setValue("meta.slug", autoGeneratedSlug);
      setIsSlugManual(true);
    }
  };

  const handleSlugChange = (value: string) => {
    form.setValue("meta.slug", value);
    // If user manually changes the slug, switch to manual mode
    if (!isSlugManual) {
      setIsSlugManual(true);
    }
  };

  // Initialize slug from title if not set
  useEffect(() => {
    if (!currentSlug && currentTitle && !isSlugManual) {
      form.setValue("meta.slug", autoGeneratedSlug);
    }
  }, [currentTitle, currentSlug, isSlugManual, autoGeneratedSlug, form]);

  return (
    <Card className="col-span-2 p-0.5">
      <CardHeader className="px-4 pt-1.5 pb-1">
        <CardTitle className="text-sm">Seo & Metadata</CardTitle>
      </CardHeader>
      <CardContent className="space-y-6 p-4">
        <div>
          <h3 className="font-medium text-gray-700 text-sm">ZM Deals</h3>
          <span className="flex items-center gap-1 font-medium text-gray-500 text-xs">
            {env.NEXT_PUBLIC_BASE_URL}
            <IconChevronRight /> deals <IconChevronRight />
            {currentSlug || autoGeneratedSlug}
          </span>
        </div>
        <Separator />
        <FormField
          control={form.control}
          name="meta.title"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Page Title</FormLabel>
              <FormControl>
                <Input name={field.name} onBlur={field.onBlur} onChange={handleTitleChange} />
              </FormControl>
              <FormDescription className="flex items-center justify-between gap-2">
                <span className={titleHook.isMaxLengthExceeded ? "text-destructive" : "text-gray-600"}>
                  <NumberFlow value={titleHook.characterCount} /> of 70 characters used
                </span>
                {titleHook.statusMessage && (
                  <span
                    className={cn(
                      "tabular-nums",
                      titleHook.isMaxLengthExceeded ? "text-destructive" : "text-yellow-600"
                    )}
                  >
                    {titleHook.statusMessage}
                  </span>
                )}
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="meta.description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Meta Description</FormLabel>
              <FormControl>
                <Input {...field} />
              </FormControl>
              <FormDescription className="flex items-center justify-between gap-2">
                <span className={descriptionHook.isMaxLengthExceeded ? "text-destructive" : "text-gray-600"}>
                  <NumberFlow value={descriptionHook.characterCount} /> of 160 characters used
                </span>
                {descriptionHook.statusMessage && (
                  <span
                    className={cn(
                      "tabular-nums",
                      descriptionHook.isMaxLengthExceeded ? "text-destructive" : "text-yellow-600"
                    )}
                  >
                    {descriptionHook.statusMessage}
                  </span>
                )}
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <FormField
          control={form.control}
          name="meta.slug"
          render={({ field }) => (
            <FormItem>
              <FormLabel className="flex items-center justify-between">
                URL Handle
                <Button
                  className="h-auto p-1 text-xs"
                  onClick={handleSlugToggle}
                  size="sm"
                  type="button"
                  variant="ghost"
                >
                  {isSlugManual ? "Auto-generate" : "Manual"}
                </Button>
              </FormLabel>
              <FormControl>
                <div className="relative font-medium">
                  <Input
                    {...field}
                    className="peer ps-[3.25rem]"
                    onChange={(e) => handleSlugChange(e.target.value)}
                    type="text"
                  />
                  <span className="pointer-events-none absolute inset-y-0 start-0 flex items-center justify-center ps-3 text-muted-foreground text-sm peer-disabled:opacity-50">
                    deals/
                  </span>
                </div>
              </FormControl>
              <FormDescription>
                <span>
                  {env.NEXT_PUBLIC_BASE_URL}/deals/{currentSlug || autoGeneratedSlug}
                </span>
                {!isSlugManual && (
                  <span className="mt-1 block text-muted-foreground text-xs">Automatically generated from title</span>
                )}
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
      </CardContent>
    </Card>
  );
};
